"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.default=void 0;var _clsx=_interopRequireDefault(require("clsx"));var React=_interopRequireWildcard(require("react"));var _stackModuleCss=_interopRequireDefault(require("./stack.module.css"));function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true})}else{obj[key]=value}return obj}function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _interopRequireWildcard(obj){if(obj&&obj.__esModule){return obj}else{var newObj={};if(obj!=null){for(var key in obj){if(Object.prototype.hasOwnProperty.call(obj,key)){var desc=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(obj,key):{};if(desc.get||desc.set){Object.defineProperty(newObj,key,desc)}else{newObj[key]=obj[key]}}}}newObj.default=obj;return newObj}}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};var ownKeys=Object.keys(source);if(typeof Object.getOwnPropertySymbols==="function"){ownKeys=ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym){return Object.getOwnPropertyDescriptor(source,sym).enumerable}))}ownKeys.forEach(function(key){_defineProperty(target,key,source[key])})}return target}var Stack=function(props){var children=props.children,tmp=props.as,Component=tmp===void 0?"div":tmp,_gap=props.gap,gap=_gap===void 0?0:_gap,_direction=props.direction,direction=_direction===void 0?"column":_direction,_align=props.align,align=_align===void 0?"stretch":_align,_justify=props.justify,justify=_justify===void 0?"flex-start":_justify,_flex=props.flex,flex=_flex===void 0?"initial":_flex,debug=props.debug,className=props.className,style=props.style;var smDirection;var mdDirection;var lgDirection;if(typeof direction==="object"){smDirection=direction.sm||"column";mdDirection=direction.md||"column";lgDirection=direction.lg||"column"}else{smDirection=direction;mdDirection=direction;lgDirection=direction}var smAlign;var mdAlign;var lgAlign;if(typeof align==="object"){smAlign=align.sm||"stretch";mdAlign=align.md||"stretch";lgAlign=align.lg||"stretch"}else{smAlign=align;mdAlign=align;lgAlign=align}var smJustify;var mdJustify;var lgJustify;if(typeof justify==="object"){smJustify=justify.sm||"flex-start";mdJustify=justify.md||"flex-start";lgJustify=justify.lg||"flex-start"}else{smJustify=justify;mdJustify=justify;lgJustify=justify}var smGap;var mdGap;var lgGap;if(typeof gap==="object"){smGap=gap.sm||0;mdGap=gap.md||0;lgGap=gap.lg||0}else{smGap=gap||0;mdGap=gap||0;lgGap=gap||0}return React.createElement(Component,{className:(0,_clsx).default(_stackModuleCss.default.stack,"stack",_defineProperty({},_stackModuleCss.default.debug,debug),className),style:_objectSpread({"--flex":flex},typeof direction==="object"?{"--sm-direction":smDirection,"--md-direction":mdDirection,"--lg-direction":lgDirection}:{"--direction":direction},typeof align==="object"?{"--sm-align":smAlign,"--md-align":mdAlign,"--lg-align":lgAlign}:{"--align":align},typeof justify==="object"?{"--sm-justify":smJustify,"--md-justify":mdJustify,"--lg-justify":lgJustify}:{"--justify":justify},style)},children,React.createElement("style",{jsx:true},"\n        @media screen and (min-width: 961px) {\n          .stack {\n            --direction: var(--lg-direction);\n            --align: var(--lg-align);\n            --justify: var(--lg-justify);\n          }\n          .stack > :global(*) + :global(*) {\n            margin-".concat(lgDirection==="row"?"left":"top",": ").concat(lgGap*4,"px;\n          }\n        }\n\n        @media screen and (min-width: 601px) and (max-width: 960px) {\n          .stack {\n            --direction: var(--md-direction);\n            --align: var(--md-align);\n            --justify: var(--md-justify);\n          }\n          .stack > :global(*) + :global(*) {\n            margin-").concat(mdDirection==="row"?"left":"top",": ").concat(mdGap*4,"px;\n          }\n        }\n\n        @media screen and (max-width: 600px) {\n          .stack {\n            --direction: var(--sm-direction);\n            --align: var(--sm-align);\n            --justify: var(--sm-justify);\n          }\n          .stack > :global(*) + :global(*) {\n            margin-").concat(smDirection==="row"?"left":"top",": ").concat(smGap*4,"px;\n          }\n        }\n      ")))};var _default=Stack;exports.default=_default