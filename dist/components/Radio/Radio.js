import clsx from"clsx";import React from"react";import{createContext,useContext,useRef}from"react";import{useFocusRing,useRadio,useRadioGroup}from"react-aria";import{useRadioGroupState}from"react-stately";import styles from"./radio.module.css";function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true})}else{obj[key]=value}return obj}function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key]}}}return target};return _extends.apply(this,arguments)}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};var ownKeys=Object.keys(source);if(typeof Object.getOwnPropertySymbols==="function"){ownKeys=ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym){return Object.getOwnPropertyDescriptor(source,sym).enumerable}))}ownKeys.forEach(function(key){_defineProperty(target,key,source[key])})}return target}var RadioContext=createContext(null);export var RadioGroup=function(props){var children=props.children,label=props.label;var state=useRadioGroupState(_objectSpread({},props,{isDisabled:props.disabled}));var ref=useRadioGroup(props,state),radioGroupProps=ref.radioGroupProps,labelProps=ref.labelProps;return React.createElement("div",_extends({},radioGroupProps,{"data-geist-radio-group":""}),React.createElement("span",_extends({className:"geist-sr-only"},labelProps),label||"Default Radio Example"),React.createElement(RadioContext.Provider,{value:state},children))};export var RadioItem=function(props){var children=props.children;var state=useContext(RadioContext);var ref=useRef(null);var ref1=useRadio(props,state,ref),inputProps=ref1.inputProps,isDisabled=ref1.isDisabled;var ref2=useFocusRing(),isFocusVisible=ref2.isFocusVisible,focusProps=ref2.focusProps;return React.createElement("label",{className:clsx([styles.item,_defineProperty({},styles.disabled,isDisabled)])},React.createElement("span",{className:styles.check},React.createElement("input",_extends({className:clsx([styles.input,"geist-sr-only"])},inputProps,focusProps,{"data-focus-visible-added":isFocusVisible?"":undefined})),React.createElement("span",{"aria-hidden":"true",className:styles.icon})),children&&React.createElement("span",{className:styles.text},children))}